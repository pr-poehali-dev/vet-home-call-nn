import { useState } from 'react';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import Icon from './ui/icon';

interface Message {
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');

  const quickQuestions = [
    "–°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", 
    "–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏",
    "–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ?",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏?"
  ];

  const responses: Record<string, string> = {
    "—Å—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "–î–ª—è —Å—Ä–æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7!",
    "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º": "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º. –ë–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30.",
    "—Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏": "–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 1500‚ÇΩ. –°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 50% –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç!",
    "—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ": "–î–∞, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7. –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.",
    "—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏": "1. –ù–µ –¥–∞–≤–∞–π—Ç–µ –µ–¥—É –∏ –≤–æ–¥—É 2. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–µ–∑–∏—Ç–µ –∫ –≤—Ä–∞—á—É 3. –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ –æ–±—Ä–∞–∑–µ—Ü —Ç–æ–≥–æ, —á–µ–º –æ—Ç—Ä–∞–≤–∏–ª—Å—è –ø–∏—Ç–æ–º–µ—Ü"
  };

  const handleSend = (text?: string) => {
    const messageText = text || inputValue.trim();
    if (!messageText) return;

    const userMessage: Message = {
      text: messageText,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');

    setTimeout(() => {
      const lowerText = messageText.toLowerCase();
      let response = responses[lowerText] || 
        Object.entries(responses).find(([key]) => lowerText.includes(key))?.[1] ||
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ª—É—á—à–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–ø–∏—Å—å—é?";

      const botMessage: Message = {
        text: response,
        isUser: false,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  return (
    <>
      {/* Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(!isOpen)}
          className={`w-16 h-16 rounded-full shadow-lg hover:scale-110 transition-all duration-300 ${
            isOpen ? 'bg-red-500 hover:bg-red-600' : 'bg-primary hover:bg-primary/90 animate-pulse'
          }`}
        >
          <Icon name={isOpen ? "X" : "MessageCircle"} size={24} className="text-white" />
        </Button>
        
        {!isOpen && (
          <div className="absolute -top-12 right-0 bg-white rounded-lg shadow-lg p-3 whitespace-nowrap animate-bounce">
            <p className="text-sm font-semibold text-gray-800">–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è! üí¨</p>
          </div>
        )}
      </div>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-80 h-96 z-40 animate-slide-up">
          <Card className="w-full h-full shadow-2xl border-2 border-primary/20">
            <div className="bg-primary text-white p-4 rounded-t-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center mr-3">
                    <Icon name="Stethoscope" size={16} className="text-primary" />
                  </div>
                  <div>
                    <p className="font-semibold">–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
                    <p className="text-xs opacity-80">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ 1 –º–∏–Ω</p>
                  </div>
                </div>
              </div>
            </div>
            
            <CardContent className="p-0 h-full flex flex-col">
              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {messages.map((message, index) => (
                  <div 
                    key={index} 
                    className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`max-w-[80%] p-3 rounded-lg text-sm ${
                      message.isUser 
                        ? 'bg-primary text-white rounded-br-none' 
                        : 'bg-gray-100 text-gray-800 rounded-bl-none'
                    }`}>
                      <p>{message.text}</p>
                      <p className={`text-xs mt-1 opacity-70 ${message.isUser ? 'text-white' : 'text-gray-500'}`}>
                        {message.timestamp.toLocaleTimeString('ru', { timeStyle: 'short' })}
                      </p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Quick Questions */}
              <div className="px-4 pb-2">
                <p className="text-xs text-gray-500 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
                <div className="flex flex-wrap gap-1">
                  {quickQuestions.slice(0, 3).map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      className="text-xs h-6 px-2"
                      onClick={() => handleSend(question)}
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Input */}
              <div className="p-4 border-t">
                <div className="flex space-x-2">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                    className="text-sm"
                    onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                  />
                  <Button onClick={() => handleSend()} size="sm">
                    <Icon name="Send" size={16} />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
};

export default ChatBot;